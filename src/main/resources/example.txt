Если в вашей системе все компоненты имеют свои зависимости, то где-то в системе какой-то класс или фабрика должны знать,
что внедрять во все эти компоненты. Вот что делает DI-контейнер. Причина, по которой это называется «контейнер»,
а не «фабрика» в том, что контейнер обычно берет на себя ответственность не только за создание
экземпляров и внедрение зависимостей.
Когда вы конфигурируете DI-контейнер, вы определяете, экземпляры каких компонентов он должен быть способен создать,
и какие зависимости внедрить в каждый компонент. Также вы обычно можете настроить режим создания экземпляра
для каждого компонента. Например, должен ли новый экземпляр создаваться каждый раз?
Или один и тот же экземпляр компонента должен быть переиспользован (синглтон) везде, куда он внедряется?
Если некоторые компоненты настроены как синглтоны, то некоторые контейнеры имеют возможность вызывать методы
синглтона тогда, когда контейнер выключается.
Таким образом синглтон может освободить любые ресурсы, которые он использует, такие как подключение к БД или сетевое соединение.
Это обычно называют «управлением жизненным циклом объекта». Это значит, что контейнер способен управлять
компонентом на различных стадиях жизненного цикла компонента. Например, создание, конфигурирование и удаление.
Управление жизненным циклом — это одна из обязанностей, которую DI контейнеры принимают в дополнение к созданию
экземпляров и их внедрению. Тот факт, что контейнер иногда сохраняет ссылку на компоненты после создания экземпляра,
и есть та причина, по которой он называется «контейнером», а не фабрикой.
DI-контейнеры обычно сохраняют ссылки на объекты, чьим жизненным циклом им предстоит управлять
или которые будут переиспользованы для будущих внедрений, такие как синглтон или приспособленец.
Когда контейнер настроен на создание новых экземпляров компонентов при каждом вызове,
контейнер обычно «забывает» о созданных объектах. В противном случае у сборщика мусора будет
горячая пора, когда придет время собирать все эти объекты.

